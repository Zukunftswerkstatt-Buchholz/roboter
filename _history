{"entries":[{"timestamp":1741972951002,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"*!9(iHq1@{BHTnr}zqM]\" x=\"0\" y=\"0"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":133,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"593Jb8H,6B:q]v@`D[iD\" x=\"205\" y=\"0\""],[0,"></b"]],"start1":107,"start2":107,"length1":48,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//% color=\"#abbf3c\" icon=\"\\uf0d1\"\nnamespace Roboter {\n    const IICADRRESS = 0x10;\n    const id = \"245rtzf000601-1512\";\n    let velocity = 0.26; //unit: mm/ms\n    let angularVelocity = 360 / 650; //unit: degree/ms\n    let tuningSpeed = 100;\n    export enum Dir {\n        //% block=\"vorwärts\"\n        CW = 0,\n        //% block=\"rückwärts\"\n        CCW = 1\n    }\n\n    function writeData(buf: number[]): void {\n        pins.i2cWriteBuffer(IICADRRESS, pins.createBufferFromArray(buf));\n    }\n\n    // ---- Drehen ----\n\n    //% blockId=id+\"turnLeft90\"\n    //% group=\"Drehen\"\n    //% block=\"90 Grad nach Links drehen\"\n    //% weight=490\n    export function turnLeft90() {\n        let wait = 90 / angularVelocity;\n        basic.pause(wait);\n        writeData([0x00, 1, tuningSpeed]);\n        writeData([0x02, 0, tuningSpeed]);\n        basic.pause(wait);\n        writeData([0x00, 0, 0]);\n        writeData([0x02, 0, 0]);\n        basic.pause(wait);\n    }\n\n    //% blockId=id+\"turnRight90\"\n    //% group=\"Drehen\"\n    //% block=\"90 Grad nach Rechts drehen\"\n    //% weight=480\n    export function turnRight90() {\n        let wait2 = 90 / angularVelocity;\n        writeData([0x00, 0, tuningSpeed]);\n        writeData([0x02, 1, tuningSpeed]);\n        basic.pause(wait2);\n        writeData([0x00, 0, 0]);\n        writeData([0x02, 0, 0]);\n    }\n\n    //% blockId=id+\"turnDegrees\"\n    //% group=\"Drehen\"\n    //% block=\"um $degrees Grad drehen\"\n    //% degrees.defl=-45\n    //% weight=470\n    export function turnDegrees(degrees: number) {\n        if (degrees < 0) {\n            degrees = degrees * (-1);\n            let wait3 = degrees / angularVelocity;\n            writeData([0x00, 0, tuningSpeed]);\n            writeData([0x02, 1, tuningSpeed]);\n            basic.pause(wait3);\n            writeData([0x00, 0, 0]);\n            writeData([0x02, 0, 0]);\n        } else {\n            let wait3 = degrees / angularVelocity;\n            writeData([0x00, 1, tuningSpeed]);\n            writeData([0x02, 0, tuningSpeed]);\n            basic.pause(wait3);\n            writeData([0x00, 0, 0]);\n            writeData([0x02, 0, 0]);\n        }\n    }\n\n    // ---- Fahren ----\n\n    //% blockId=id+\"driveTime\"\n    //% block=\"Für $time ms|%direction|fahren\"\n    //% group=\"Fahren\"\n    //% time.defl=1000\n    //% direction.fieldEditor=\"gridpicker\"\n    //% direction.fieldOptions.width=220\n    //% direction.fieldOptions.columns=3\n    //% weight=390\n    export function driveTime(time: number, direction: Dir) {\n        writeData([0x00, direction, 200]);\n        writeData([0x02, direction, 200]);\n        basic.pause(time);\n        writeData([0x00, 0, 0]);\n        writeData([0x02, 0, 0]);\n    }\n\n    //% blockId=id+\"driveDistance\"\n    //% block=\"Für $distance cm fahren\"\n    //% group=\"Fahren\"\n    //% distance.defl=10\n    //% weight=380\n    export function driveDistance(distance: number) {\n        let direction = 0;\n        if (distance < 0) {\n            direction = 1;\n            distance = distance * (-1);\n        }\n        let wait4 = ((distance * 10) / velocity); // (cm*10)/mm/ms \n        writeData([0x00, direction, 200]);\n        writeData([0x02, direction, 200]);\n        basic.pause(wait4)\n        writeData([0x00, 0, 0]);\n        writeData([0x02, 0, 0]);\n    }\n\n    //% blockId=id+\"stopMotor\"\n    //% block=\"Robotor anhalten\"\n    //% group=\"Fahren\"\n    //% weight=370\n    export function stopMotor() {\n        writeData([0x00, 0, 0]);\n        writeData([0x02, 0, 0]);\n    }\n\n    //% blockId=id+\"driveNonBlockingForever\"\n    //% block=\"Für immer |%direction|mit Geschwindigkeit $speed fahren\"\n    //% group=\"Fahren\"\n    //% direction.fieldEditor=\"gridpicker\"\n    //% direction.fieldOptions.width=220\n    //% direction.fieldOptions.columns=3\n    //% speed.min=0 speed.max=255\n    //% speed.defl=200\n    //% direction.defl=0\n    //% weight=360\n    export function driveNonBlockingForever(direction: Dir, speed: number) {\n        writeData([0x00, direction, speed]);\n        writeData([0x02, direction, speed]);\n    }\n\n    // ---- Erweitert Fahren ----\n\n    //% blockId=id+\"driveNonBlockingForeverLeftSpeed\"\n    //% block=\"Für immer |%direction|mit Geschwindigkeit $speed Links fahren\"\n    //% group=\"Erweiterte Steuerung\"\n    //% direction.fieldEditor=\"gridpicker\"\n    //% direction.fieldOptions.width=220\n    //% direction.fieldOptions.columns=3\n    //% speed.min=0 speed.max=255\n    //% speed.defl=200\n    //% direction.defl=0\n    //% weight=290\n    export function driveNonBlockingForeverLeft(direction: Dir, speed: number) {\n        writeData([0x00, direction, speed]);\n    }\n\n    //% blockId=id+\"driveNonBlockingForeverRightSpeed\"\n    //% block=\"Für immer |%direction|mit Geschwindigkeit $speed Rechts fahren\"\n    //% group=\"Erweiterte Steuerung\"\n    //% direction.fieldEditor=\"gridpicker\"\n    //% direction.fieldOptions.width=220\n    //% direction.fieldOptions.columns=3\n    //% speed.min=0 speed.max=255\n    //% speed.defl=200\n    //% direction.defl=0\n    //% weight=280\n    export function driveNonBlockingForeverRight(direction: Dir, speed: number) {\n        writeData([0x02, direction, speed]);\n\n    }\n\n    //% blockId=id+\"driveTimeNonBlocking\"\n    //% block=\"Für $time ms|%direction|fahren, dabei das Programm weiter laufen lassen\"\n    //% group=\"Erweiterte Steuerung\"\n    //% time.defl=1000\n    //% direction.fieldEditor=\"gridpicker\"\n    //% direction.fieldOptions.width=220\n    //% direction.fieldOptions.columns=3\n    //% speed.min=0 speed.max=255\n    //% speed.defl=200\n    //% direction.defl=0\n    //% weight=270\n    export function driveTimeNonBlocking(time: number, direction: Dir) {\n        control.inBackground(function () {\n            writeData([0x00, direction, 200]);\n            writeData([0x02, direction, 200]);\n            basic.pause(time);\n            writeData([0x00, 0, 0]);\n            writeData([0x02, 0, 0]);\n        })\n    }\n\n\n    // ---- Konfiguration ----\n\n    //% blockId=id+\"setVelocity\"\n    //% block=\"1s sind $distance cm\"\n    //% group=\"Konfiguration\"\n    //% weight=190\n    export function setVelocity(distance: number) {\n        velocity = distance / 100; // unit: mm/ms\n    }\n\n    //% blockId=id+\"setAngularVelocity\"\n    //% block=\"500ms sind $degrees Grad\"\n    //% group=\"Konfiguration\"\n    //% weight=180\n    export function setAngularVelocity(degrees: number) {\n        angularVelocity = degrees / 500; //unit: degree/ms\n    }\n\n    //% blockId=id+\"driveFor1000Ms\"\n    //% block=\"für 1s fahren\"\n    //% group=\"Konfiguration\"\n    //% weight=170\n    export function driveFor1000Ms() {\n        writeData([0x00, 0, 200]);\n        writeData([0x02, 0, 200]);\n        basic.pause(1000);\n        writeData([0x00, 0, 0]);\n        writeData([0x02, 0, 0]);\n    }\n\n    //% blockId=id+\"turnFor500ms\"\n    //% block=\"für 500ms fahren\"\n    //% group=\"Konfiguration\"\n    //% weight=160\n    export function turnFor500ms() {\n        writeData([0x00, 0, tuningSpeed]);\n        writeData([0x02, 1, tuningSpeed]);\n        basic.pause(500);\n        writeData([0x00, 0, 0]);\n        writeData([0x02, 0, 0]);\n    }\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":7018,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"re\":"],[-1," \"*\",\n        \"v1\":"],[0," \"*\""]],"start1":81,"start2":81,"length1":27,"length2":8},{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":182,"start2":182,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// Hier kann man Tests durchführen; diese Datei wird nicht kompiliert, wenn dieses Paket als Erweiterung verwendet wird.\n"}]}],"snapshots":[{"timestamp":1741972951001,"editorVersion":"7.0.3","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Roboter\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1741973027742}